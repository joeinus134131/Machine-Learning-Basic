# -*- coding: utf-8 -*-
"""Decision Tree (Studi Kasus Play or NOT).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dC3N5gPgwFKWH4ZxPupKHt7DoDFIr9Po

# **Data Science - Decision Tree** 

---


*  Author : Made Agus Andi Gunawan
*  Student Ambassador bisa.ai

---

Dasar Scikit learn Library Python
Scikit Learn : https://scikit-learn.org/stable/

Decision Tree : https://en.wikipedia.org/wiki/Decision_tree

### **Menggunakan Dataset IRIS**

Referensi : https://en.wikipedia.org/wiki/Iris_flower_data_set
"""

#Iris Dataset
from sklearn.datasets import load_iris

#library untuk Decision Tree
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree

iris = load_iris()
X, y = iris.data, iris.target

iris

X

clf = tree.DecisionTreeClassifier()
clf = clf.fit(X, y)

X.shape

X

y.shape

y

tree.plot_tree(clf)

import graphviz

dot_data = tree.export_graphviz(clf, out_file = None)
graph = graphviz.Source(dot_data)
graph.render("iris")

graph

#exsport text
from sklearn.tree import export_text

decisiontree = DecisionTreeClassifier(random_state=0, max_depth=10)
decisiontree = decisiontree.fit(iris.data, iris.target)

r = export_text(decisiontree, feature_names=iris['feature_names'])

print(r)

#cek jumlah kelas dan dimensi feature
X, y = load_iris(return_X_y=True)
print(f'dimensi Feature : {X.shape}')
print(f'Class : {set(y)}')

#membuat training data
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size =0.3, random_state=0)

#melihat max depth
decisiontree.fit(X_train, y_train)

from sklearn.metrics import classification_report

y_pred = decisiontree.predict(X_test)

#menampilkan hasil prediksi dari Decision Tree
print(classification_report(y_test, y_pred))

"""# **2 Cara untuk eksekusi Decision Tree - Studi Kasus Kegalauan Pemain Golf**

**A. Cara Pertama (menggunakan LabelEncoder untuk mentransformasi data)**

Input Dataset Keputusan Untuk Bermain Golf
"""

#A. Memprediksi suatu class atau category
import pandas as pd
from sklearn.tree import DecisionTreeClassifier

"""Input Dataset dari Google Drive"""

from google.colab import drive
drive.mount('/content/drive')

"""Manual input dataset dari komputer"""

play = pd.read_excel("/content/Golf.xls")

#menampilkan data
play

#menampilkan data teratas
play.head(10)

#menampilkan data terbawah
play.tail()

#cek data kosong atau kerusakan data
play.isna().sum()

#summary data
play.describe()

#Memisahkan label dan atribut
X = play[['Outlook', 'Temperature', 'Humidity', 'Windy']]  #Prediktor
y = play['Play']  #target

#Transformasi data
from sklearn.preprocessing import LabelEncoder
lb = LabelEncoder()

X['Outlook'] = lb.fit_transform(X['Outlook'])
X['Temperature'] = lb.fit_transform(X['Temperature'])
X['Humidity'] = lb.fit_transform(X['Humidity'])
X['Windy'] = lb.fit_transform(X['Windy'])
y = lb.fit_transform(y)

#permodelan dan prediksi secara supervised

tree_model = DecisionTreeClassifier(criterion="entropy")
tree_model.fit(X,y)

tree_model.predict([[0.9, 0.1, 0, 0]])

#Visualisasi

from sklearn.tree import export_graphviz
import pydot

export_graphviz(tree_model, out_file = 'tree.dot', feature_names = X.columns, rounded = True, precision = 1)
(graph, ) = pydot.graph_from_dot_file('tree.dot')
graph.write_png('tree.png')

graph

"""**B. Cara Kedua (menggunakan get_dummies untuk mentransformasi data**)"""

import numpy as np
import pandas as pd
df = pd.read_excel("/content/Golf.xls")

df_getdummy=pd.get_dummies(data=df, columns=['Outlook', 'Temperature', 'Humidity', 'Windy'])
df_getdummy

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=101)

from sklearn.tree import DecisionTreeClassifier
dtree = DecisionTreeClassifier(max_depth=3)
dtree.fit(X_train,y_train)
predictions = dtree.predict(X_test)

predictions

from sklearn.tree import plot_tree
import matplotlib.pyplot as plt
fig = plt.figure(figsize=(16,12))

a = plot_tree(dtree, feature_names=df_getdummy.columns, fontsize=12, filled=True,
class_names=['Tidak Main', 'Main'])